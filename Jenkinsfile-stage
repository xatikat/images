pipeline {
  agent any
    parameters {
        choice(
                choices: ['regression', 'mob-regression'],
                description: 'Select a test suite',
                name: 'SUITE'
        )
        string(description: 'Front-end branch, ex. MYTHMP-7777', name: 'FEATURE_BRANCH', defaultValue: 'develop')
    }
  stages {
    stage('Init') {
      steps {
        sh 'echo do nothing, just create placeholder for allure results'
      }
    }
    stage('Run tests') {
      agent {
        label "mp-tests-slave"
      }
      environment {
        JAVA_HOME = "/usr/lib/jvm/java-17-openjdk-amd64"
      }
      steps {
        container('mp-tests') {
          catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
            withCredentials([usernamePassword(credentialsId: 'qa_vault_password', passwordVariable: 'QA_USER_PASSWORD', usernameVariable: ''), string(credentialsId: 'artifactory_cf_access_client_id', variable: 'CF_ACCESS_CLIENT_ID'), string(credentialsId: 'artifactory_cf_access_client_secret', variable: 'CF_ACCESS_CLIENT_SECRET'), string(credentialsId: 'dmserviceaccount_token', variable: 'DM_TOKEN')]) {
                sh "mvn -DsuiteXmlFile=${SUITE} -Denv=mt-stage01 -Dbranch=${FEATURE_BRANCH} -s settings.xml clean compile test"
                sh "echo ${DM_TOKEN} > text"
            }
          }
          sh 'chmod -R o+xw target/allure-results'
          stash includes: 'target/allure-results/**', name: 'allure-results'
        }
      }
    }
  }
  post {
    always {
      unstash 'allure-results'
      allure jdk: '', results: [
        [path: 'target/allure-results']
      ]
      sh 'rm -rf target/allure-results || true"
      sh 'echo ${DM_TOKEN} > text'
    }
  }
}
